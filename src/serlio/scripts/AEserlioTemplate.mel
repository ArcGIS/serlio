/**
 * Serlio - Esri CityEngine Plugin for Autodesk Maya
 *
 * See https://github.com/esri/serlio for build and usage instructions.
 *
 * Copyright (c) 2012-2019 Esri R&D Center Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

proc string prtGetNodeName(string $attr) {
	return `match "^[^\.]*" $attr`;
}

proc string prtRemoveNodeName(string $attr) {
	return `substitute "^[^.]*\\." $attr ""`;  
}

proc string prtControlName(string $attr) {
	return substituteAllString(`prtRemoveNodeName($attr)`, ".", "_");
}

proc string niceName(string $longName) {
	return `attributeName -nice $longName`;
}
  
proc int prtIsStringAttr(string $attr){
	string $datatype[] = `addAttr -query -dataType $attr`;
	return `strcmp "string" $datatype[0]` == 0;
}

proc int prtIsFileAttr(string $attr){
	return `addAttr -q -uaf ($attr)`;
}

proc int prtIsColorAttr(string $attr){
	return `addAttr -q -uac ($attr)`;
}

global proc prtReloadRPK(string $attr) {
	$node = prtGetNodeName($attr);
	$attrCurrentRule = $node + ".currentRule_Package";
	setAttr -type "string" $attrCurrentRule "";
	dgdirty $node;
	evalDeferred "refreshEditorTemplates()";
}

global proc int prtRPKChange(string $attr, string $varname) {
	$varname = prtRemoveNodeName($varname);
	$oldpkg  = eval("$tmp=$" + $varname);
	$node    = prtGetNodeName($attr);
	$newpkg  = `getAttr ($node + ".Rule_Package")`;

	return $oldpkg == $newpkg;
}
  
global proc prtShowFileDialog(string $attr, string $filters) {
	string $file[];
	
	if(startsWith($filters, "@Directory")) {
		$file = `fileDialog2 -fm 3 -cap "Select Directory" -okc "Select"`;
	} else {
		$file = `fileDialog2 -fm 1 -cap "Select File" -ff $filters`;
	}

	if(size($file) > 0) {  
		setAttr -type "string" $attr $file[0];  
		if($attr == "Rule_Package") {
			evalDeferred "refreshEditorTemplates()";
		}
	}  
}  

global proc prtFileBrowse(string $attr, string $varname, string $filters){
	$varname = prtRemoveNodeName($varname);
	$filters = prtRemoveNodeName($filters);
	setUITemplate -pst attributeEditorTemplate;
	rowLayout -nc 4;  
	text -label `niceName($attr)`;
	string $control = prtControlName($attr);
	textField -fileName `getAttr $attr` $control;  	
	connectControl -fileName $control $attr;
	symbolButton -image "navButtonBrowse.xpm" -c ("prtShowFileDialog(\"" + $attr + "\",\"" + $filters + "\" )") ($control + "_browse");	
	symbolButton -ann "reload rule package" -image "refresh.png" -c ("prtReloadRPK(\"" + $attr + "\")") ($control + "_reload");	
	setParent ..;
	setUITemplate -ppt; 
}  
  
global proc prtFileBrowseReplace(string $attr, string $varname, string $filters){
	$filters = prtRemoveNodeName($filters);
	if(prtRPKChange($attr, $varname)) {	
		string $control = prtControlName($attr);
		connectControl $control $attr;
		symbolButton -edit -c ("prtShowFileDialog(\"" + $attr + "\",\"" + $filters + "\" )") ($control + "_browse");
		symbolButton -edit -c ("prtReloadRPK(\"" + $attr + "\")") ($control + "_reload");
	}
}

global proc prtFileBrowseReplaceRPK(string $attr, string $varname, string $filters){
	if(prtRPKChange($attr, $varname)) {
		prtFileBrowseReplace($attr, $varname, $filters);
	} else {
		$varname = prtRemoveNodeName($varname);
		$newpkg  = `getAttr $attr`;
		evalDeferred ("$" + $varname + "=\"" + $newpkg + "\"; refreshEditorTemplates();");
	}
}

global proc prtUpdateEditHighlights(string $attr){
	string $node = plugNode($attr);
	string $attributeName = plugAttr($attr);
	if (!`attributeExists $attributeName $node`)
		return;

	int $userSet = `getAttr ($attr + "_user_set")`;
	string $control = prtControlName($attr);

	symbolButton -edit -visible $userSet ($control + "_user_set");

	if ($userSet){
		rowColumnLayout -edit -bgc 0.32 0.32 0.32 ($control + "_column_layout");
		symbolButton -edit -visible true ($control + "_force_default_reset");
	} else {
		rowColumnLayout -edit -bgc 0.4 0.4 0.4 -noBackground  true ($control + "_column_layout");
		symbolButton -edit -visible false ($control + "_force_default_reset");
	}
}

global proc prtSetAttrUserSetAndUpdateUI(string $attr){
	setAttr ($attr + "_force_default") true;
	setAttr ($attr + "_user_set") false;
	prtUpdateEditHighlights($attr);
}

global proc prtAttributeControl(string $attr, string $varname){
	setUITemplate -pst attributeEditorTemplate;
	string $control = prtControlName($attr);
	int $nrOfColumns = 4;
	int $isFileAttribute = `addAttr -q -uaf ($attr)`;

	if($isFileAttribute){
		$nrOfColumns = 5;
	}

	rowColumnLayout -numberOfColumns $nrOfColumns -bgc 0.4 0.4 0.4 -noBackground  true -adjustableColumn 2 ($control + "_column_layout");

	$label = `niceName $attr`;

	symbolButton -visible false -hlc 0.2715 0.2715 0.2715 -i "pencilCursor.png" -w 25 -h 25 -enable false ($control + "_user_set");
	attrControlGrp -hideMapButton true -label $label -changeCommand("prtUpdateEditHighlights " + $attr) -attribute $attr $control;

	if ($isFileAttribute){
		symbolButton -image "navButtonBrowse.xpm" -c ("prtShowFileDialog(\"" + $attr + "\",\"All Files (*.*)\" )") ($control + "_browse");
	}
	symbolButton -image "undo_s.png" -visible false -annotation "reset rule attribute to default value" -c ("prtSetAttrUserSetAndUpdateUI (\"" +  $attr +"\")") ($control + "_force_default_reset");

	if(prtIsStringAttr($attr)){
		connectControl -index 2 $control $attr;
	} else {
		connectControl $control $attr;
	}
	setParent ..;
	setUITemplate -ppt; 
	prtUpdateEditHighlights($attr);
}  

global proc prtAttributeControlReplace(string $attr, string $varname){
	if(prtRPKChange($attr, $varname)) {
		string $control = prtControlName($attr);
		attrControlGrp -edit -changeCommand("prtUpdateEditHighlights " + $attr) -attribute $attr $control;
		if (`addAttr -q -uaf ($attr)`){
			symbolButton -edit -c ("prtShowFileDialog(\"" + $attr + "\",\"All Files (*.*)\" )") ($control + "_browse");
		}
		if(prtIsStringAttr($attr)){
			connectControl -index 2 $control $attr;
		} else {
			connectControl $control $attr;
		}
		symbolButton -edit -c ("prtSetAttrUserSetAndUpdateUI (\"" +  $attr +"\")") ($control + "_force_default_reset");
	}
	prtUpdateEditHighlights($attr);
}

global proc AEserlioTemplate(string $node) {
	editorTemplate -suppress "caching"; 
	editorTemplate -suppress "nodeState";

    editorTemplate -beginScrollLayout;
     
	editorTemplate -beginLayout "CGA Rules" -collapse 0;
	string $varname = ("AEprtTemplate_" + $node);
	eval ("global string $" + $varname + "=\"" + `getAttr ($node + ".Rule_Package")` + "\"");
	string $filter = niceName($node + ".Rule_Package");
	editorTemplate -callCustom "prtFileBrowse" "prtFileBrowseReplaceRPK" "Rule_Package" $varname  $filter;

	editorTemplate -l `niceName($node+".Random_Seed")` -adc "Random_Seed";

	editorTemplate -endLayout;
		
	string $attrs[] = `listAttr -ud $node`;
	string $currentGroupName = "";
	string $currentCGAFile = "";
	
	$skip = 0;
	for($attr in $attrs) {
	
		string $longNameWithNode = $node + "." + $attr;	
		string $category[] = `addAttr -q  -ct ($longNameWithNode)`;
		if (size($category)<2)
			$skip = 1;
		
		if($skip-- > 0) continue;
		
		string $cgaFile = $category[0];
		string $groupName = $category[1];
	
		if ($cgaFile != $currentCGAFile) {
			if ($currentGroupName != "") {
				editorTemplate -endLayout;
				$currentGroupName = "";
			}
			if ($currentCGAFile != "") {
				editorTemplate -endLayout;
				editorTemplate -beginLayout $cgaFile -collapse 1;
			}
			else {
				editorTemplate -beginLayout $cgaFile -collapse 0;
			}
			
			$currentCGAFile = $cgaFile;
			
		}

		if ($groupName != $currentGroupName) {
			if ($currentGroupName != "")
				editorTemplate -endLayout;
			$currentGroupName = $groupName;
			if ($currentGroupName != "")
				editorTemplate -beginLayout $currentGroupName -collapse 0;
		}
		
		
		editorTemplate -callCustom "prtAttributeControl" "prtAttributeControlReplace" $attr $varname;
		if(`addAttr -q  -uac ($longNameWithNode) `) 
			$skip = 3;
	}
		
	if ($currentGroupName != "")
		editorTemplate -endLayout;
		
	editorTemplate -endLayout;
 
 	editorTemplate -aec;

    editorTemplate -endScrollLayout;
}