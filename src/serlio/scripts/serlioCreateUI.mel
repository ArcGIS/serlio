/**
 * Serlio - Esri CityEngine Plugin for Autodesk Maya
 *
 * See https://github.com/esri/serlio for build and usage instructions.
 *
 * Copyright (c) 2012-2019 Esri R&D Center Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

proc string[] appendArray(string $a0[], string $a1[]) {
	string $result[] = $a0;
	for($e in $a1)
		if(!stringArrayContains($e, $result)){
			$result[size($result)] = $e;
		}
	return $result;
}

proc string[] collectInitialShapes(string $nodes[]) {
	string $result[];
	for($node in $nodes) {
	    string $type = `nodeType $node`;
		if($type == "mesh") {
			$result = appendArray($result, {$node});
		} else if($type == "transform") {
			string $tmp[] = collectInitialShapes(`listRelatives -ni -pa -children $node`);
			$result = appendArray($result, $tmp);
		}
	}
	return $result;	  
}

proc int hasNodeTypeInHistory(string $node, string $nodeTypes[]){
	string $hist[] = `listHistory -f false $node`;
	string $future[] = `listHistory -f true $node`;
	$hist = appendArray($hist, $future);
	if (size($hist) > 1) {
		for ($node in $hist){
			string $nodeType = `nodeType $node`;
			if(stringArrayContains($nodeType, $nodeTypes))
				return true;
		}
	}
	return false;
}

proc deleteNodeTypesFromHistory(string $node, string $nodeTypes[]){
	string $nodeHistory[] = `listHistory $node`;
	
	for($dpNode in $nodeHistory){
		string $dpNodeType = `nodeType $dpNode`;
		if(stringArrayContains($dpNodeType, $nodeTypes)){
			string $previousDpNodePlug =  `connectionInfo -sfd ($dpNode +".inMesh")`;
			string $nextDpNodePlugs[] = `connectionInfo -dfs ($dpNode +".outMesh")`;
			if ($previousDpNodePlug != "") {
				for($nextDpNodePlug in $nextDpNodePlugs)
					connectAttr -force $previousDpNodePlug $nextDpNodePlug;
			}
			delete $dpNode;
		}
	}
}

global proc createPrtNode() {
	string $select[] = `ls -sl`;
	string $initialShapes[] = collectInitialShapes($select);
	
	if(size($initialShapes) == 0) {
		confirmDialog -title "Missing selection" -message "Please select shapes first in order to apply a rule." -button "OK";
		return;
	}

	$filters = "Rule Package (*.rpk);;All Files (*.*)";
	string $rulePackage[] = `fileDialog2 -fm 1 -cap "Select Rule Package" -ff $filters`;
	
	int $alreadyHasExistingPrtNode = false;
	if(size($rulePackage) > 0) {
		for($node in $initialShapes) {
			select -r $node;
			string $nodeHistory[] = `listHistory $node`;

			for($dpNode in $nodeHistory){
				string $dpNodeType = `nodeType $dpNode`;
				if($dpNodeType == "serlio"){
					setAttr -type "string" ($dpNode + ".Rule_Package") $rulePackage[0];  
					evalDeferred "refreshEditorTemplates()";
					$alreadyHasExistingPrtNode = true;
				}
			}

			if (!$alreadyHasExistingPrtNode && !hasNodeTypeInHistory($node, {"serlio"}))
				serlioAssign $rulePackage;

			$alreadyHasExistingPrtNode = false;
		}
	}
	select -r $select;
}

global proc removePrtNode() {
	string $select[] = `ls -sl`;
	string $initialShapes[] = collectInitialShapes($select);
	
	if(size($initialShapes) == 0) {
		confirmDialog -title "Missing selection" -message "Please select at least one shape to remove the associated rule package." -button "OK";
		return;
	}

	for($node in $initialShapes) {
		select -r $node;
		hyperShade -assign "lambert1";
		deleteNodeTypesFromHistory($node, {"serlio", "serlioMaterial", "serlioArnoldMaterial"});
	}

	select -r $select;
}

global proc createMaterialNode(string $materialType) {
	string $select[] = `ls -sl`;
	string $initialShapes[] = collectInitialShapes($select);
	
	if(size($initialShapes) == 0) {
		confirmDialog -title "Missing selection" -message "Please select shapes first in order to create materials." -button "OK";
		return;
	}	
	
	for($node in $initialShapes) {
		select -r $node;
		if(hasNodeTypeInHistory($node, {"serlio"}) && !hasNodeTypeInHistory($node, {"serlioMaterial","serlioArnoldMaterial"}))
			serlioCreateMaterial $materialType;
	}
	select -r $select;
}

global proc createPrtMenu() {
	global string $gMainWindow;
	global string $gPrtMenu = "prtMenu"; 

	setParent $gMainWindow;
	if (`isTrue "BaseMayaExists"`) { 
		menu -l "Serlio" -aob true -to true -postMenuCommandOnce true $gPrtMenu;
		setParent -m ..; 
		setParent -m $gPrtMenu;
		menuItem -divider true;
		menuItem -label "Attach CityEngine Rule Package..."  -c "createPrtNode" -annotation "Attach a CGA rule package to a geometry";
		menuItem -label "Remove CityEngine Rule Package"  -c "removePrtNode" -annotation "Remove a CGA rule package from a geometry";
		menuItem -label "Create Materials"  -c "createMaterialNode(\"stingray\")" -annotation "Create Materials";
		menuItem -label "Create Arnold Materials" -c "createMaterialNode(\"arnold\")" -annotation "Create Arnold Materials";
		setParent -m ..;
	}
}

global proc serlioCreateUI() {
 	createPrtMenu();
}

// --- material helpers

global proc prtSetDiffuseTexture(string $sgName, string $texturePath, string $uvSet) {
	string $shName = $sgName + "H";
	shadingNode -asShader lambert -n $shName;
	connectAttr -f ($shName + ".outColor") ($sgName + ".surfaceShader");

	string $nodeName = $sgName + "F";

	shadingNode -asTexture file -n $nodeName;
	connectAttr -force ($nodeName + ".outColor") ($shName + ".color");
	setAttr ($nodeName + ".fileTextureName") -type "string" $texturePath;
}

global proc prtSetColor(string $sgName, float $r, float $g, float $b) {
	$shaderPlug = `connectionInfo -sfd ($sgName + ".surfaceShader")`;
	$shName = `plugNode $shaderPlug`;

	string $nodeName = "prtColor_" + $sgName;

	shadingNode -asShader blinn -n $nodeName;
	setAttr ($nodeName + ".color") -type "double3" $r $g $b;
	connectAttr -force ($nodeName + ".outColor") ($sgName + ".surfaceShader");
}
